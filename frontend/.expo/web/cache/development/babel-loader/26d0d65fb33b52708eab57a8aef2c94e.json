{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar initialState = {\n  count: 0\n};\n\nvar countReducer = function countReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"COUNTER_CHANGE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default countReducer;","map":{"version":3,"sources":["D:/Users/Desktop/BOOOKS/SEMESTER 6/SE/Project/frontend/src/react-redux/reducers/countReducer.js"],"names":["initialState","count","countReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AACE,6CACKF,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFhB;;AAIF;AACE,aAAOH,KAAP;AAPJ;AASD,CAVD;;AAWA,eAAeD,YAAf","sourcesContent":["const initialState = {\r\n  count: 0,\r\n};\r\nconst countReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"COUNTER_CHANGE\":\r\n      return {\r\n        ...state,\r\n        count: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default countReducer;\r\n"]},"metadata":{},"sourceType":"module"}